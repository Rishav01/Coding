QuickRevise: Program to find square of each number in a list.
--------------------------------------------------------------------------------

package com.ardonagh.workflow.controllers;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

//Example of map() of stream API
public class Test {

    public static void main(String args[]){
        List<Integer> numbers = new ArrayList<>();
        numbers.add(1);
        numbers.add(2);
        numbers.add(3);
        numbers.add(4);
        numbers.add(5);

        //finding square of each number
        List<Integer> squares = numbers.stream().map(number -> number*number).collect(Collectors.toList());
        squares.stream().forEach(square -> System.out.println(square));
    }
}
-----------------------------------------------------------------------------------------------------------------------
QuickRevise: Filter only even number in the list of numbers

package com.ardonagh.workflow.controllers;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

//Example of filter() of stream API
public class Test {

    public static void main(String args[]){
        List<Integer> numbers = new ArrayList<>();
        numbers.add(1);
        numbers.add(2);
        numbers.add(3);
        numbers.add(4);
        numbers.add(5);

        //filtering only even numbers
        List<Integer> evenNumbers = numbers.stream().filter(number -> number%2==0).collect(Collectors.toList());
        evenNumbers.stream().forEach(number -> System.out.println(number));
    }
}
---------------------------------------------------------------------------------------------------------------------
QuickRevise: Sort the number in a list

package com.ardonagh.workflow.controllers;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

//Example of sort() of stream API
public class Test {

    public static void main(String args[]){
        List<Integer> numbers = new ArrayList<>();
        numbers.add(1);
        numbers.add(8);
        numbers.add(3);
        numbers.add(9);
        numbers.add(5);

        //Sorting the numbers
        List<Integer> sortedNumbers = numbers.stream().sorted().collect(Collectors.toList());
        sortedNumbers.stream().forEach(number -> System.out.println(number));
    }
}
-----------------------------------------------------------------------------------------------------------------
QuickRevise: Find only distinct number from the list of numbers

package com.ardonagh.workflow.controllers;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

//Example of distinct() of stream API
public class Test {

    public static void main(String args[]){
        List<Integer> numbers = new ArrayList<>();
        numbers.add(1);
        numbers.add(8);
        numbers.add(3);
        numbers.add(1);
        numbers.add(8);

            //finding the distinct numbers
        List<Integer> evenNumbers = numbers.stream().distinct().collect(Collectors.toList());
        System.out.println(evenNumbers);
    }
}
------------------------------------------------------------------------------------------------------------------
QuickRevise: Display distinct numbers from list of numbers

package com.ardonagh.workflow.controllers;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

//Example of forEach() of stream API
public class Test {

    public static void main(String args[]){
        List<Integer> numbers = new ArrayList<>();
        numbers.add(1);
        numbers.add(8);
        numbers.add(3);
        numbers.add(1);
        numbers.add(8);

        //using forEach to display each distinct number
        numbers.stream().distinct().forEach(input -> System.out.println(input));
    }
}
---------------------------------------------------------------------------------------------------------------------
QuickRevise: Find the highest number in the list of the number

package com.ardonagh.workflow.controllers;

import io.swagger.models.auth.In;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

//Example of reduce() of stream API
public class Test {

    public static void main(String args[]){
        List<Integer> numbers = new ArrayList<>();
        numbers.add(1);
        numbers.add(8);
        numbers.add(3);
        numbers.add(1);
        numbers.add(8);

        //using reduce to display the highest number
        Optional<Integer> shortestNumber = numbers.stream().reduce((number1, number2) ->
            number1>number2? number1 : number2
        );

        System.out.println(
                numbers.stream().reduce(
                        (number1, number2) -> number1>number2? number1 : number2));

    }
}

----------------------------------------------------------------------------------------------------

QuickRevise: Find the sum in the list of the number.
(Return statement and semocolon comes when {} are used)

package com.ardonagh.workflow.controllers;

import io.swagger.models.auth.In;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

//Example of reduce() of stream API
public class Test {

    public static void main(String args[]){
        List<Integer> numbers = new ArrayList<>();
        numbers.add(1);
        numbers.add(8);
        numbers.add(3);
        numbers.add(1);
        numbers.add(8);

        //using reduce to display the highest number
        Integer sumOfAll = numbers.stream().reduce((number1, number2) -> {
           return number1+number2;
        }).get();

        System.out.println(sumOfAll);

    }
}
-----------------------------------------------------------------------------------------------------------
QuickRevise: Show the usage of flatmap

public static void main(String[] args)
    {
        List<List<Integer>> numbers = new ArrayList<>();
        numbers.add(Arrays.asList(1,2));
        numbers.add(Arrays.asList(3,4));
        numbers.add(Arrays.asList(5,6));
        numbers.add(Arrays.asList(7,8));
        numbers.add(Arrays.asList(9,10));

        System.out.println(numbers);

        List<Integer> listOfInteger = numbers.stream().flatMap(input -> input.stream().map(integer -> integer+1)).collect(Collectors.toList());

        System.out.println(listOfInteger);

    }

----------------------------------------------------------------------------------------------------------
QuickRevise: Show the usage of Peek() method

    public static void main(String[] args)
    {
        List<Integer> numbers = new ArrayList<>();
        numbers.add(1);
        numbers.add(4);
        numbers.add(3);
        numbers.add(8);
        numbers.add(6);

        List<Integer> filerNumber = numbers.stream().filter(number -> number%2==0).peek(number -> System.out.println(number)).collect(Collectors.toList());

    }
---------------------------------------------------------------------------------------------------------
QuickRevise: Print the count of empty string in a list of Strings.

public class Test {

    public static void main(String args[]){
        List<String> strList = Arrays.asList("abc", "", "bcd", "", "defg", "jk");
        System.out.println(strList.stream().filter(input -> input.length()==0).count());
    }
}
----------------------------------------------------------------------------------------------------------


QuickRevise: Sort the number highest to lowest order.
