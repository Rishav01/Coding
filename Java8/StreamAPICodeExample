Programing question using intermediate operation
1. You are given a list of numbers. You need to find the largest number that is divisible by both 3 and 5.
2. Write a Java program that prints all the prime numbers from 1 to 100.
3. Return true or false if none of the number is properly divisible by 10.
4. Given a list of integers, find out all the numbers starting with 1 using Stream functions?
5. How to find duplicate elements in a given integers list in java using Stream functions?
6. Given the list of integers, find the first element of the list using Stream functions?
7. Given a list of integers, find the total number of elements present in the list using Stream functions?
8. Given a list of integers, find the maximum value element present in it using Stream functions?
9. Given a String, find the first non-repeated character in it using Stream functions?
10. Given a String, find the first repeated character in it using Stream functions?
11. Given a list of integers, sort all the values present in it in descending order using Stream functions?
12. Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.
13. Java 8 program to perform cube on list elements and filter numbers greater than 50.
14. Write a program to print the count of each character in a String?
15. Merge two Employee ArrayList and sort by age in using java8 stream API

Learnings:
1. (use of hashmap in finding repeating and non repeating char) If we have to find all repeating or non repeating chars then solve it through frequency of char of that string using hashmap.
2. (use of hashmap in finding first repeating and non repeating char) Its important that map holds freuency in the order of insertion. Hence, use linkedHashMap instead of hashmap.
3. (What is the trick for sorting in descending order?) 
4. (How to create stream from String?) use chars()
5. (How to create stream of char from String?) first string.char() then IntStream milegi. Then, use mapToObjs(i -> Character.valueOf((char) i)).
6. (How to get current Datetime/Date/Localtime in java?) LocalDateTime.now(). Remember the now method. 
7. (Write a Java 8 program to concatenate two Streams?) We use Stream.concate(list1.stream(), list2.Stream()) method.
8. (Write a Java 8 program to sort an array and then convert the sorted array into Stream?) First use Arrays.sort(numbers) and then Arrays.stream(numbers).
9. (How to use map to convert object into Uppercase in Java 8?) .map(String::toUpperCase)
10. How to check if the list is null? Optional.ofNullable(words).isPresent() put this in if condition.
11. How to null check a string before using Stream on it? Optional.ofNullable(words).orElseGet(() -> new ArrayList<String>()).stream().forEach(word -> wordFrequency.put(word, wordFrequency.get(word)==null? 1 : wordFrequency.get(word)+1));
12. What is the logic for findig the largest element through streams? System.out.print(numbers.stream().reduce((number1, number2) -> number1>number2?number1:number2));
13. How should you define your variable (int or Integer)? Integer
14. How to collect a map? Map<Integer, String> employeeMap = employees.stream().collect(Collectors.toMap(employee -> employee.getId(), employee -> employee.getName()));

-------------------------------------------------------------------------------------------------------------------------
1. You are given a list of numbers. You need to find the largest number that is divisible by both 3 and 5.
public static void main(String args[]){
        List<Integer> numbers = List.of(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15);

        numbers = numbers.stream().sorted().filter(number->number%3==0 && number%5==0)
                .collect(Collectors.toList());

        numbers.stream().forEach(System.out::println);
    }

2. Write a Java program that prints all the prime numbers from 1 to 100.
public static void main(String args[]){
        IntStream.rangeClosed(1, 100).filter(number -> IntStream.rangeClosed(2, ((number/2)+1))
                .noneMatch(n -> number%n==0)).forEach(System.out::println);
    }


3. 

4. Given a list of integers, find out all the numbers starting with 1 using Stream functions?
    public static void main(String args[]){
        List<Integer> numbers = List.of(12,22,13,43,15,199,200);
        numbers.stream().filter(number -> {
            return (number+"").startsWith("1");
        }).forEach(System.out::println);
    }

5. How to find duplicate elements in a given integers list in java using Stream functions?
    public static void main(String args[]){
        List<Integer> numbers = List.of(12,22,12,43,22,199,200);
        Map<Integer, Integer> frequency = new HashMap<>();
        numbers.stream().forEach(number -> frequency.put(number, frequency.get(number)==null
                ? 1 : frequency.get(number)+1));
        frequency.entrySet().stream().filter(entry -> entry.getValue()>1).forEach(System.out::println);
    }

6. Given the list of integers, find the first element of the list using Stream functions?
    public static void main(String args[]){
        List<Integer> numbers = List.of(1,2,3,4,5);
        numbers.stream().findFirst().ifPresent(System.out::println);
    }


7. Given a list of integers, find the total number of elements present in the list using Stream functions?
    public static void main(String args[]){
        List<Integer> numbers = List.of(1,2,3,4,5);
        System.out.print(numbers.stream().count());
    }


8. Given a list of integers, find the maximum value element present in it using Stream functions?
    public static void main(String args[]){
        List<Integer> numbers = List.of(1,2,3,9,5,6,7);
        System.out.print(numbers.stream().reduce((number1, number2) -> number1>number2 ? number1 : number2));
    }

9. Given a String, find the first non-repeated character in it using Stream functions?
public static void main(String args[]){
        String input = "HiHiltilj";
        Map<Character, Integer> charFrequency = new LinkedHashMap<>();
        input.chars().mapToObj(inputChar -> Character.valueOf((char)inputChar))
                .forEach(alphabet -> charFrequency.put(alphabet, charFrequency.get(alphabet)==null
                ? 1 : charFrequency.get(alphabet)+1));
        charFrequency.entrySet().stream().filter(entry -> entry.getValue()==1).findFirst()
                .ifPresent(System.out::println);
    }

10. Given a String, find the first repeated character in it using Stream functions?


11. Given a list of integers, sort all the values present in it in descending order using Stream functions?
public static void main(String args[]){
        List<Integer> numbers = List.of(27,1,23,8,4,19,6,7);
        numbers.stream().sorted((i1, i2) -> i2.compareTo(i1)).forEach(System.out::println);
    }

12. Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.
    public static void main(String args[]){
        Integer[] numbers = {1,23,4,5};
        Map<Integer, Integer> frequency = new HashMap<>();
        Arrays.stream(numbers).forEach(value -> frequency.put(value, frequency.get(value)==null
                ? 1 : frequency.get(value)+1));
        System.out.print(frequency.entrySet().stream().anyMatch(entry -> entry.getValue()>1));
    }


13. Java 8 program to perform cube on list elements and filter numbers greater than 50.
    public static void main(String args[]){
        List<Integer> numbers1 = List.of(4,5,6,7,8,1,2,3);

        numbers1.stream().filter(number -> (number*number*number)>50)
                .forEach(value -> System.out.println(value*value*value));
    }


14. Write a program to print the count of each character in a String?
    public static void main(String args[]){
        String input = "I love Hilti India";
        Map<Character, Integer> alphaFrequency = new HashMap<>();

        input.replace(" ", "").chars().mapToObj(value -> Character.toLowerCase(Character.valueOf((char) value)))
                .forEach(value -> alphaFrequency.put(value, alphaFrequency.get(value)==null
                        ? 1 : alphaFrequency.get(value)+1));
        alphaFrequency.entrySet().stream().forEach(System.out::println);
    }

15. Merge two Employee ArrayList and sort by age in using java8 stream API



16. 








=====================================================================================================
QuickRevise: Program to find square of each number in a list.
--------------------------------------------------------------------------------

package com.ardonagh.workflow.controllers;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

//Example of map() of stream API
public class Test {

    public static void main(String args[]){
        List<Integer> numbers = new ArrayList<>();
        numbers.add(1);
        numbers.add(2);
        numbers.add(3);
        numbers.add(4);
        numbers.add(5);

        //finding square of each number
        List<Integer> squares = numbers.stream().map(number -> number*number).collect(Collectors.toList());
        squares.stream().forEach(square -> System.out.println(square));
    }
}
-----------------------------------------------------------------------------------------------------------------------
QuickRevise: Filter only even number in the list of numbers

package com.ardonagh.workflow.controllers;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

//Example of filter() of stream API
public class Test {

    public static void main(String args[]){
        List<Integer> numbers = new ArrayList<>();
        numbers.add(1);
        numbers.add(2);
        numbers.add(3);
        numbers.add(4);
        numbers.add(5);

        //filtering only even numbers
        List<Integer> evenNumbers = numbers.stream().filter(number -> number%2==0).collect(Collectors.toList());
        evenNumbers.stream().forEach(number -> System.out.println(number));
    }
}
---------------------------------------------------------------------------------------------------------------------
QuickRevise: Sort the number in a list

package com.ardonagh.workflow.controllers;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

//Example of sort() of stream API
public class Test {

    public static void main(String args[]){
        List<Integer> numbers = new ArrayList<>();
        numbers.add(1);
        numbers.add(8);
        numbers.add(3);
        numbers.add(9);
        numbers.add(5);

        //Sorting the numbers
        List<Integer> sortedNumbers = numbers.stream().sorted().collect(Collectors.toList());
        sortedNumbers.stream().forEach(number -> System.out.println(number));
    }
}
-----------------------------------------------------------------------------------------------------------------
QuickRevise: Find only distinct number from the list of numbers

package com.ardonagh.workflow.controllers;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

//Example of distinct() of stream API
public class Test {

    public static void main(String args[]){
        List<Integer> numbers = new ArrayList<>();
        numbers.add(1);
        numbers.add(8);
        numbers.add(3);
        numbers.add(1);
        numbers.add(8);

            //finding the distinct numbers
        List<Integer> evenNumbers = numbers.stream().distinct().collect(Collectors.toList());
        System.out.println(evenNumbers);
    }
}
------------------------------------------------------------------------------------------------------------------
QuickRevise: Display distinct numbers from list of numbers

package com.ardonagh.workflow.controllers;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

//Example of forEach() of stream API
public class Test {

    public static void main(String args[]){
        List<Integer> numbers = new ArrayList<>();
        numbers.add(1);
        numbers.add(8);
        numbers.add(3);
        numbers.add(1);
        numbers.add(8);

        //using forEach to display each distinct number
        numbers.stream().distinct().forEach(input -> System.out.println(input));
    }
}
---------------------------------------------------------------------------------------------------------------------
QuickRevise: Find the highest number in the list of the number

package com.ardonagh.workflow.controllers;

import io.swagger.models.auth.In;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

//Example of reduce() of stream API
public class Test {

    public static void main(String args[]){
        List<Integer> numbers = new ArrayList<>();
        numbers.add(1);
        numbers.add(8);
        numbers.add(3);
        numbers.add(1);
        numbers.add(8);

        //using reduce to display the highest number
        Optional<Integer> shortestNumber = numbers.stream().reduce((number1, number2) ->
            number1>number2? number1 : number2
        );

        System.out.println(
                numbers.stream().reduce(
                        (number1, number2) -> number1>number2? number1 : number2));

    }
}

----------------------------------------------------------------------------------------------------

QuickRevise: Find the sum in the list of the number.
(Return statement and semocolon comes when {} are used)

package com.ardonagh.workflow.controllers;

import io.swagger.models.auth.In;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

//Example of reduce() of stream API
public class Test {

    public static void main(String args[]){
        List<Integer> numbers = new ArrayList<>();
        numbers.add(1);
        numbers.add(8);
        numbers.add(3);
        numbers.add(1);
        numbers.add(8);

        //using reduce to display the highest number
        Integer sumOfAll = numbers.stream().reduce((number1, number2) -> {
           return number1+number2;
        }).get();

        System.out.println(sumOfAll);

    }
}
-----------------------------------------------------------------------------------------------------------
QuickRevise: Show the usage of flatmap

public static void main(String[] args)
    {
        List<List<Integer>> numbers = new ArrayList<>();
        numbers.add(Arrays.asList(1,2));
        numbers.add(Arrays.asList(3,4));
        numbers.add(Arrays.asList(5,6));
        numbers.add(Arrays.asList(7,8));
        numbers.add(Arrays.asList(9,10));

        System.out.println(numbers);

        List<Integer> listOfInteger = numbers.stream().flatMap(input -> input.stream().map(integer -> integer+1)).collect(Collectors.toList());

        System.out.println(listOfInteger);

    }

----------------------------------------------------------------------------------------------------------
QuickRevise: Show the usage of Peek() method

    public static void main(String[] args)
    {
        List<Integer> numbers = new ArrayList<>();
        numbers.add(1);
        numbers.add(4);
        numbers.add(3);
        numbers.add(8);
        numbers.add(6);

        List<Integer> filerNumber = numbers.stream().filter(number -> number%2==0).peek(number -> System.out.println(number)).collect(Collectors.toList());

    }
---------------------------------------------------------------------------------------------------------
QuickRevise: Print the count of empty string in a list of Strings.

public class Test {

    public static void main(String args[]){
        List<String> strList = Arrays.asList("abc", "", "bcd", "", "defg", "jk");
        System.out.println(strList.stream().filter(input -> input.length()==0).count());
    }
}
----------------------------------------------------------------------------------------------------------


QuickRevise: Sort the number highest to lowest order.
