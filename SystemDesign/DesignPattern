|Factory Design Pattern|

1. Show exmaple of Factory Design Pattern

package com.rishav.demoCamunda.servicetask.factoryexample;

public abstract class Shape {

    Integer area;

    public abstract Integer calculateArea();
}

package com.rishav.demoCamunda.servicetask.factoryexample;

public class Circle extends Shape{

    @Override
    public Integer calculateArea() {
        System.out.println("calculated Area");
        return 1;
    }
}


package com.rishav.demoCamunda.servicetask.factoryexample;

public class Rectangle extends Shape{

    @Override
    public Integer calculateArea() {
        System.out.println("Calculated area of Rectangle.");
        return 2;
    }
}

package com.rishav.demoCamunda.servicetask.factoryexample;

public class ShapeFactory {

    public static Shape getShape(String type){
        if(type.equalsIgnoreCase("circle")){
            return new Circle();
        }else if(type.equalsIgnoreCase("Rectangle")){
            return new Rectangle();
        }else{
            throw new RuntimeException("Shape type provided is not valid");
        }
    }
}


package com.rishav.demoCamunda.servicetask.factoryexample;

public class Client {

    public static void main(String args[]){
        Shape shape = ShapeFactory.getShape("Circle");
        System.out.println(shape.calculateArea());
    }
}

-----------------------------------------------------------------------------------------------

|Singleton Design Pattern|
