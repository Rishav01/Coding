Find the n’th term in Look-and-say (Or Count and Say) Sequence. The look-and-say sequence is the sequence of the below integers: 
1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, … 

How is the above sequence generated? 
n’th term is generated by reading (n-1)’th term.

The first term is "1"

Second term is "11", generated by reading first term as "One 1" 
(There is one 1 in previous term)

Third term is "21", generated by reading second term as "Two 1"

Fourth term is "1211", generated by reading third term as "One 2 One 1" 

and so on
How to find n’th term? 

-------------------------------------------------------------------------

class Solution{
    static String lookandsay(int n) {
        Solution s = new Solution();
        return s.row(n);
    }
    
    private String row(int n){
        String currentRow = "1";
        Integer currentRowCount = 1;
        while(currentRowCount<n){
            currentRow = nextRow(currentRow);
            currentRowCount++;
        }
        return currentRow;
    }
    //1211
    private String nextRow(String currentRow){
        if(currentRow.length()==1){
            return "1"+currentRow;
        }
        
        String nextRow = "";
        Integer currentIndex = 0;
        Integer msIndex = 0;
        Integer meIndex = 0;
        String matchedDigit = currentRow.substring(0, 1);
        Boolean lastMatched = false;
        
        while(currentIndex<currentRow.length()-1){
            if(currentRow.substring(currentIndex, currentIndex+1).equalsIgnoreCase(
                currentRow.substring(currentIndex+1, currentIndex+2))){
                    meIndex++;
                    currentIndex++;
                    lastMatched = true;
            }else{
                nextRow = nextRow + String.valueOf(meIndex-msIndex+1) + matchedDigit;
                currentIndex++;
                msIndex = currentIndex;
                meIndex = currentIndex;
                matchedDigit = currentRow.substring(currentIndex, currentIndex+1);
                lastMatched = false;
            }
        }
        
        if(lastMatched){
            nextRow = nextRow + String.valueOf(meIndex-msIndex+1) + matchedDigit;
        }else{
            nextRow = nextRow + "1" + currentRow.substring(currentRow.length()-1, 
            currentRow.length());
        }
        
        return nextRow;
    }
}
