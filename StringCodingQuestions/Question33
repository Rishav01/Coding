License Key Formatting (https://www.geeksforgeeks.org/license-key-formatting/)
Given a string S that consists of only alphanumeric characters and dashes. The string is separated into N + 1 groups by N dashes. Also given an integer K.

We want to reformat the string S, such that each group contains exactly K characters, except for the first group, which could be shorter than K but still must contain at least one character. Furthermore, a dash must be inserted between two groups, and you should convert all lowercase letters to uppercase.
Return the reformatted string.
Input: S = “5F3Z-2e-9-w”, K = 4
Output: “5F3Z-2E9W”
Input: S = “2-5g-3-J”, K = 2
Output: “2-5G-3J”
-----------------------------------------------------------------------------------------------------------------------
Solution:

public class Test {
    public static void main(String[] args)
    {
        String s = "abbc";
        
    }
    
    private static String licenseKeyFormatting(String input, Integer k) {
        input = input.replaceAll("-", "");
        Integer totalLength = input.length();
        Integer firstDash = totalLength % k;
        Integer factor = 0;
        if(firstDash!=0){
            input = input.substring(0, firstDash) + "-" + input.substring(firstDash, totalLength); //
            factor=firstDash+1;
            totalLength++;
        }
        Integer leftOutDashes = totalLength/k;
        while(leftOutDashes>0 && (factor+k)<totalLength){
            //totalLength++; //25g3J
            input = input.substring(0, factor+k) + "-" + input.substring(factor+k, totalLength);
            factor = factor + k;
            leftOutDashes--;
        }
        return input;
    }
}

------------------------------------------------------------------------------------------------------
1. Solutoin 1 approach: 
2. Need to understand that String.substring(start, end). It includes start and exclude end. But if length is 6 of the string then we can keep end =6 to include the char at
index 5.
