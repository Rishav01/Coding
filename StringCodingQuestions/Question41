Given two strings A and B. Find minimum number of times A has to be repeated such that B is a Substring of it. If B can never be a substring then return -1.


Input:
A = "abcd"
B = "cdabcdab"
Output:
3
Explanation:
Repeating A three times (“abcdabcdabcd”),
B is a substring of it. B is not a substring
of A when it is repeated less than 3 times.

Input:
A = "ab"
B = "cab"
Output :
-1
Explanation:
No matter how many times we repeat A, we can't
get a string such that B is a substring of it.


-------------------------------------------------------------------------------------------------

class Solution {
    static int minRepeats(String A, String B) {
        /*if(haveDifferentChar()){
            return -1;
        }*/
        Integer count=1;
        Integer loopBreaker = 0;
        String newA = A;
        while(loopBreaker<60){
            if(newA.length()<B.length()){
                newA = newA+A;
                count++;
            }else{
                Integer result = isSubstring(newA, B);
                if(result==-1){
                    return -1;
                }else if(result==0){
                    return count;
                }else{
                    newA = newA+A;
                    count++;
                } 
                loopBreaker++;
            }
        }
        return -1;
    }
    
    
    
    private static Integer isSubstring(String A, String B){
        Integer aStart = 0;
        Integer bStart = 0;
        Integer contMatchedCount = 0;
        Integer contUnmatchedCount = 0;
        while(aStart<=A.length()-1 && bStart<=B.length()-1){
            if(A.charAt(aStart)==B.charAt(bStart)){
                aStart++;
                bStart++;
                contMatchedCount++;
                contUnmatchedCount = 0;
            }else{
                aStart++;
                contMatchedCount = 0;
                contUnmatchedCount++;
                if((A.length()-aStart)<B.length()){
                    break;
                }
            }
            if(contMatchedCount==B.length()){
                return 0;
            }
            if(contUnmatchedCount == A.length()){
                return -1;
            }
        }
        return 1;
    }
};
